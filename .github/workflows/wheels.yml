name: Build and upload to PyPI

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-10.15]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.8'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel>=1.10.0

      - name: Windows wheels
        if: matrix.os == 'windows-2019'
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_SKIP: "*_i686 *-win32"
          CIBW_BEFORE_BUILD_WINDOWS: "bash {project}/ci/windows-deps"
          CIBW_TEST_COMMAND: "bash {project}/ci/test"
          INCLUDE: "C:\\Program Files (x86)\\liknorm\\include"
          LIB: "C:\\Program Files (x86)\\liknorm\\lib"

      - name: Linux wheels
        if: matrix.os == 'ubuntu-20.04'
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_SKIP: "*_i686 *-win32"
          CIBW_BEFORE_BUILD_LINUX: "{project}/ci/linux-deps"
          CIBW_TEST_COMMAND: "bash {project}/ci/test"

      - name: Mac wheels
        uses: pypa/cibuildwheel@v2.0.0
        if: matrix.os == 'macos-10.15'
        env:
          CIBW_ARCHS_MACOS: x86_64 universal2
          CIBW_SKIP: "*_i686 *-win32"
          CIBW_BEFORE_BUILD_MACOS: "{project}/ci/macos-deps"
          CIBW_TEST_COMMAND: "bash {project}/ci/test"
          CIBW_TEST_SKIP: "pp*"
          C_INCLUDE_PATH: /usr/local/include
          LIBRARY_PATH: /usr/local/lib
          LIKNORM_EXTRA_LINK_ARGS: "-Wl,-rpath,/usr/local/lib"

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.8'

      - name: Build sdist
        run: python setup.py sdist

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}
