name: Test, build, and deploy to PyPI

on: [push, pull_request]
env:
  MACOSX_DEPLOYMENT_TARGET: 11.0


jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11, windows-2022]

    steps:
      - uses: actions/checkout@v3

      - name: Test it
        run: |
          pipx install poetry==1.2.0b3
          poetry install
          poetry run pytest

  make_wheels:
    name: Make wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11, windows-2022]

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.9.0
        env:
          CIBW_ARCHS_LINUX: "auto aarch64"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.8,<3.11"
          CIBW_TEST_COMMAND: "bash {project}/ci/test"
          CIBW_TEST_SKIP: "*_arm64"
          CIBW_BEFORE_BUILD: "pip install cffi cmake --upgrade"

      - uses: actions/upload-artifact@v3
        with:
          name: artifact
          path: wheelhouse/*.whl

  make_sdist:
    name: Make sdist
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          name: artifact
          path: dist/*.tar.gz

  upload_all:
    needs: [test, make_wheels, make_sdist]
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
